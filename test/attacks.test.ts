import {
  rookAttacks,
  bishopAttacks,
  knightAttacks,
  kingAttacks,
  silverAttacks,
  goldAttacks,
  lanceAttacks,
  horseAttacks,
  dragonAttacks,
  ray,
  between,
} from '../src/attacks';
import { SquareSet } from '../src/squareSet';

test('ray', () => {
  expect(ray(0, 240)).toEqual(SquareSet.fromFile(0));
  expect(ray(240, 0)).toEqual(SquareSet.fromFile(0));
  expect(ray(0, 15)).toEqual(SquareSet.fromRank(0));
  expect(ray(15, 0)).toEqual(SquareSet.fromRank(0));
  expect(ray(0, 255)).toEqual(
    new SquareSet([0x20001, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x80004000])
  );
  expect(ray(255, 0)).toEqual(
    new SquareSet([0x20001, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x80004000])
  );
});

test('between', () => {
  expect(between(42, 42)).toEqual(SquareSet.empty());
  expect(Array.from(between(0, 3))).toEqual([1, 2]);
  expect(Array.from(between(3, 0))).toEqual([1, 2]);
  expect(Array.from(between(0, 34))).toEqual([17]);
  expect(Array.from(between(34, 0))).toEqual([17]);
  expect(Array.from(between(208, 240))).toEqual([224]);
  expect(Array.from(between(240, 208))).toEqual([224]);
});

test('lance attacks', () => {
  expect(lanceAttacks('sente', 0, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('sente', 1, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('sente', 14, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('sente', 15, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('sente', 42, SquareSet.empty())).toEqual(
    new SquareSet([0x4000400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
  expect(lanceAttacks('sente', 240, SquareSet.empty())).toEqual(
    new SquareSet([0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x1])
  );
  expect(lanceAttacks('sente', 241, SquareSet.empty())).toEqual(
    new SquareSet([0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x2])
  );
  expect(lanceAttacks('sente', 254, SquareSet.empty())).toEqual(
    new SquareSet([0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x4000])
  );
  expect(lanceAttacks('sente', 255, SquareSet.empty())).toEqual(
    new SquareSet([0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x8000])
  );

  expect(lanceAttacks('gote', 0, SquareSet.empty())).toEqual(
    new SquareSet([0x10000, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001])
  );
  expect(lanceAttacks('gote', 1, SquareSet.empty())).toEqual(
    new SquareSet([0x20000, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002])
  );
  expect(lanceAttacks('gote', 14, SquareSet.empty())).toEqual(
    new SquareSet([0x40000000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000])
  );
  expect(lanceAttacks('gote', 15, SquareSet.empty())).toEqual(
    new SquareSet([0x80000000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000])
  );
  expect(lanceAttacks('gote', 42, SquareSet.empty())).toEqual(
    new SquareSet([0x0, 0x4000000, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400])
  );
  expect(lanceAttacks('gote', 240, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('gote', 241, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('gote', 254, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(lanceAttacks('gote', 255, SquareSet.empty())).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));

  expect(lanceAttacks('sente', 42, new SquareSet([0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
  expect(lanceAttacks('sente', 42, new SquareSet([0x400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0x4000400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
});

test('knight attacks', () => {
  expect(knightAttacks('sente', 0)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('sente', 1)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('sente', 14)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('sente', 15)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('sente', 42)).toEqual(new SquareSet([0xa00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('sente', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0]));
  expect(knightAttacks('sente', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50000, 0x0]));
  expect(knightAttacks('sente', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0000000, 0x0]));
  expect(knightAttacks('sente', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0]));

  expect(knightAttacks('gote', 0)).toEqual(new SquareSet([0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 1)).toEqual(new SquareSet([0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 14)).toEqual(new SquareSet([0x0, 0xa000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 15)).toEqual(new SquareSet([0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 42)).toEqual(new SquareSet([0x0, 0x0, 0xa00, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(knightAttacks('gote', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
});

test('silver attacks', () => {
  expect(silverAttacks('sente', 0)).toEqual(new SquareSet([0x20000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('sente', 1)).toEqual(new SquareSet([0x50000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('sente', 14)).toEqual(new SquareSet([0xa0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('sente', 15)).toEqual(new SquareSet([0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('sente', 42)).toEqual(new SquareSet([0xe000000, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('sente', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3]));
  expect(silverAttacks('sente', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7]));
  expect(silverAttacks('sente', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe000]));
  expect(silverAttacks('sente', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc000]));

  expect(silverAttacks('gote', 0)).toEqual(new SquareSet([0x30000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('gote', 1)).toEqual(new SquareSet([0x70000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('gote', 14)).toEqual(new SquareSet([0xe0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('gote', 15)).toEqual(new SquareSet([0xc0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('gote', 42)).toEqual(new SquareSet([0xa000000, 0xe000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(silverAttacks('gote', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2]));
  expect(silverAttacks('gote', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5]));
  expect(silverAttacks('gote', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa000]));
  expect(silverAttacks('gote', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000]));
});

test('gold attacks', () => {
  expect(goldAttacks('sente', 0)).toEqual(new SquareSet([0x10002, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('sente', 1)).toEqual(new SquareSet([0x20005, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('sente', 14)).toEqual(new SquareSet([0x4000a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('sente', 15)).toEqual(new SquareSet([0x80004000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('sente', 42)).toEqual(new SquareSet([0xe000000, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('sente', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20003]));
  expect(goldAttacks('sente', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50007]));
  expect(goldAttacks('sente', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa000e000]));
  expect(goldAttacks('sente', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000c000]));

  expect(goldAttacks('gote', 0)).toEqual(new SquareSet([0x30002, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('gote', 1)).toEqual(new SquareSet([0x70005, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('gote', 14)).toEqual(new SquareSet([0xe000a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('gote', 15)).toEqual(new SquareSet([0xc0004000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('gote', 42)).toEqual(new SquareSet([0x4000000, 0xe000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(goldAttacks('gote', 240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20001]));
  expect(goldAttacks('gote', 241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50002]));
  expect(goldAttacks('gote', 254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0004000]));
  expect(goldAttacks('gote', 255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40008000]));
});

test('rook attacks', () => {
  expect(rookAttacks(0, SquareSet.empty())).toEqual(
    new SquareSet([0x1fffe, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001])
  );
  expect(rookAttacks(1, SquareSet.empty())).toEqual(
    new SquareSet([0x2fffd, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002])
  );
  expect(rookAttacks(14, SquareSet.empty())).toEqual(
    new SquareSet([0x4000bfff, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000])
  );
  expect(rookAttacks(15, SquareSet.empty())).toEqual(
    new SquareSet([0x80007fff, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000])
  );
  expect(rookAttacks(42, SquareSet.empty())).toEqual(
    new SquareSet([0x4000400, 0x400fbff, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400])
  );
  expect(rookAttacks(240, SquareSet.empty())).toEqual(
    new SquareSet([0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0xfffe0001])
  );
  expect(rookAttacks(241, SquareSet.empty())).toEqual(
    new SquareSet([0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0xfffd0002])
  );
  expect(rookAttacks(254, SquareSet.empty())).toEqual(
    new SquareSet([0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0xbfff4000])
  );
  expect(rookAttacks(255, SquareSet.empty())).toEqual(
    new SquareSet([0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x7fff8000])
  );

  expect(rookAttacks(42, new SquareSet([0xa000000, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0x4000400, 0x400fbff, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400])
  );
  expect(rookAttacks(42, new SquareSet([0x4000000, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0x4000000, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
  expect(rookAttacks(42, new SquareSet([0x0, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0x4000400, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
});

test('bishop attacks', () => {
  expect(bishopAttacks(0, SquareSet.empty())).toEqual(
    new SquareSet([0x20000, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x80004000])
  );
  expect(bishopAttacks(1, SquareSet.empty())).toEqual(
    new SquareSet([0x50000, 0x100008, 0x400020, 0x1000080, 0x4000200, 0x10000800, 0x40002000, 0x8000])
  );
  expect(bishopAttacks(14, SquareSet.empty())).toEqual(
    new SquareSet([0xa0000000, 0x8001000, 0x2000400, 0x800100, 0x200040, 0x80010, 0x20004, 0x1])
  );
  expect(bishopAttacks(15, SquareSet.empty())).toEqual(
    new SquareSet([0x40000000, 0x10002000, 0x4000800, 0x1000200, 0x400080, 0x100020, 0x40008, 0x10002])
  );
  expect(bishopAttacks(42, SquareSet.empty())).toEqual(
    new SquareSet([0xa001100, 0xa000000, 0x20801100, 0x80204040, 0x80010, 0x20004, 0x1, 0x0])
  );
  expect(bishopAttacks(240, SquareSet.empty())).toEqual(
    new SquareSet([0x40008000, 0x10002000, 0x4000800, 0x1000200, 0x400080, 0x100020, 0x40008, 0x2])
  );
  expect(bishopAttacks(241, SquareSet.empty())).toEqual(
    new SquareSet([0x80000000, 0x20004000, 0x8001000, 0x2000400, 0x800100, 0x200040, 0x80010, 0x5])
  );
  expect(bishopAttacks(254, SquareSet.empty())).toEqual(
    new SquareSet([0x10000, 0x40002, 0x100008, 0x400020, 0x1000080, 0x4000200, 0x10000800, 0xa000])
  );
  expect(bishopAttacks(255, SquareSet.empty())).toEqual(
    new SquareSet([0x20001, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x4000])
  );

  expect(bishopAttacks(42, new SquareSet([0x4000000, 0x4000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0xa001100, 0xa000000, 0x20801100, 0x80204040, 0x80010, 0x20004, 0x1, 0x0])
  );
  expect(bishopAttacks(42, new SquareSet([0xa000000, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0xa000000, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
  expect(bishopAttacks(42, new SquareSet([0x8000000, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]))).toEqual(
    new SquareSet([0xa000100, 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
  );
});

test('king attacks', () => {
  expect(kingAttacks(0)).toEqual(new SquareSet([0x30002, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(kingAttacks(1)).toEqual(new SquareSet([0x70005, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(kingAttacks(14)).toEqual(new SquareSet([0xe000a000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(kingAttacks(15)).toEqual(new SquareSet([0xc0004000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(kingAttacks(42)).toEqual(new SquareSet([0xe000000, 0xe000a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]));
  expect(kingAttacks(240)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20003]));
  expect(kingAttacks(241)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50007]));
  expect(kingAttacks(254)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa000e000]));
  expect(kingAttacks(255)).toEqual(new SquareSet([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000c000]));
});

test('dragon attacks', () => {
  expect(dragonAttacks(0, SquareSet.empty())).toEqual(
    new SquareSet([0x3fffe, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001])
  );
  expect(dragonAttacks(1, SquareSet.empty())).toEqual(
    new SquareSet([0x7fffd, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002])
  );
  expect(dragonAttacks(14, SquareSet.empty())).toEqual(
    new SquareSet([0xe000bfff, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000])
  );
  expect(dragonAttacks(15, SquareSet.empty())).toEqual(
    new SquareSet([0xc0007fff, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000])
  );
  expect(dragonAttacks(42, SquareSet.empty())).toEqual(
    new SquareSet([0xe000400, 0xe00fbff, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400, 0x4000400])
  );
  expect(dragonAttacks(240, SquareSet.empty())).toEqual(
    new SquareSet([0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0xfffe0003])
  );
  expect(dragonAttacks(241, SquareSet.empty())).toEqual(
    new SquareSet([0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0x20002, 0xfffd0007])
  );
  expect(dragonAttacks(254, SquareSet.empty())).toEqual(
    new SquareSet([0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0x40004000, 0xbfffe000])
  );
  expect(dragonAttacks(255, SquareSet.empty())).toEqual(
    new SquareSet([0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x80008000, 0x7fffc000])
  );
});

test('horse attacks', () => {
  expect(horseAttacks(0, SquareSet.empty())).toEqual(
    new SquareSet([0x30002, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x80004000])
  );
  expect(horseAttacks(1, SquareSet.empty())).toEqual(
    new SquareSet([0x70005, 0x100008, 0x400020, 0x1000080, 0x4000200, 0x10000800, 0x40002000, 0x8000])
  );
  expect(horseAttacks(14, SquareSet.empty())).toEqual(
    new SquareSet([0xe000a000, 0x8001000, 0x2000400, 0x800100, 0x200040, 0x80010, 0x20004, 0x1])
  );
  expect(horseAttacks(15, SquareSet.empty())).toEqual(
    new SquareSet([0xc0004000, 0x10002000, 0x4000800, 0x1000200, 0x400080, 0x100020, 0x40008, 0x10002])
  );
  expect(horseAttacks(42, SquareSet.empty())).toEqual(
    new SquareSet([0xe001100, 0xe000a00, 0x20801100, 0x80204040, 0x80010, 0x20004, 0x1, 0x0])
  );
  expect(horseAttacks(240, SquareSet.empty())).toEqual(
    new SquareSet([0x40008000, 0x10002000, 0x4000800, 0x1000200, 0x400080, 0x100020, 0x40008, 0x20003])
  );
  expect(horseAttacks(241, SquareSet.empty())).toEqual(
    new SquareSet([0x80000000, 0x20004000, 0x8001000, 0x2000400, 0x800100, 0x200040, 0x80010, 0x50007])
  );
  expect(horseAttacks(254, SquareSet.empty())).toEqual(
    new SquareSet([0x10000, 0x40002, 0x100008, 0x400020, 0x1000080, 0x4000200, 0x10000800, 0xa000e000])
  );
  expect(horseAttacks(255, SquareSet.empty())).toEqual(
    new SquareSet([0x20001, 0x80004, 0x200010, 0x800040, 0x2000100, 0x8000400, 0x20001000, 0x4000c000])
  );
});
